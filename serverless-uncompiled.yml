service: ${{self:custom.service}}
frameworkVersion: ">=1.5.0 <2.0.0"

plugins:
  - prepare-offline
  # - serverless-resources-env
  - serverless-plugin-tracing
  # - serverless-pseudo-parameters
  # - serverless-sam
  # - serverless-apigw-binary
  - serverless-plugin-aws-alerts
  # - serverless-plugin-common-excludes
  - serverless-plugin-log-retention
  # - serverless-dynamodb-autoscaling
  # - serverless-s3-encryption
  # - serverless-plugin-split-stacks
  # - serverless-plugin-warmup
  # - serverless-plugin-typescript
  # - print
  # - warmup
  # - serverless-dynamodb-ttl
  # - serverless-plugin-write-env-vars
  # - serverless-plugin-include-dependencies
  # - serverless-dynamodb-local
  # - serverless-dynamodb-local
  # - serverless-s3-local
  - serverless-iot-local
  - init-local
  - "@tradle/serverless-offline"
  - pre-deploy
  # - serverless-offline-scheduler

package:
  # artifactDirectoryName: serverless/${{self:service}}/${{self:provider.stage}}/artifacts
  include:
    - conf
    - data
    - serverless-interpolated.yml
  exclude:
    - src/**
    - vars.json
    - logs/**
    - "*.log"
    - "*.rdb"
    - ".*"
    - loadtesting/**
    - myswagger.json
    - myidentity.json
    - lib/test/**
    - lib/scripts/**
    - conf/**
    - certs/**
    - org/**
    - docker/**
    - docs/**
    - codebuild/**
    - node_modules/**/*.ts
    - node_modules/**/*.d.ts
    - node_modules/**/test/*
    - node_modules/**/tests/*
    - node_modules/chokidar/**
    - node_modules/fsevents/**
    - node_modules/canvas/**
    - "node_modules/@tradle/gen-samples/**"
    - node_modules/lambda-ghostscript/**/doc/**
    - node_modules/lambda-ghostscript/**/examples/**
    - node_modules/lambda-ghostscript/**/man/**
    - node_modules/moment/min/**
    - node_modules/moment/src/**
    - node_modules/caniuse-lite/data/features
    - node_modules/caniuse-lite/data/regions
    - node_modules/aes-js/~/**
    - node_modules/node-gs/tests/**
    - package-lock.json
    - clienttest/
    - .localstack/**

custom:
  vars: ${{file(./vars.json), file(./default-vars.json)}}
  version: ${{file(./lib/version.json)}}
  defaults: ${{file(./default-vars.json)}}
  # move these to vars.json when this issue is fixed:
  #   https://github.com/serverless/serverless/issues/3740
  service: ${{self:custom.vars.service, self:custom.defaults.service}}
  stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaults.stage}}
  # stage: dev
  region: ${{opt:region, self:custom.vars.region, self:custom.defaults.region}}
  profile: ${{opt:profile, self:custom.vars.profile, self:custom.defaults.profile}}
  stackName: ${{self:service}}-${{self:custom.stage}}
  versionFunctions: ${{self:custom.vars.versionFunctions, self:custom.defaults.versionFunctions}}
  deploymentBucket: ${{file(./lib/cli/get-stack-parameter.js):parameterExistingDeploymentBucket}}

  blockchain: ${{self:custom.vars.blockchain, self:custom.defaults.blockchain}}
  corda: ${{self:custom.vars.corda, self:custom.defaults.corda}}
  # providerConf: &providerConf
  #   ${{file(./src/in-house-bot/conf/provider.json)}}
  # org: ${{self:custom.vars.org, self:custom.defaults.org}}

  # logging: ${{self:custom.vars.logging, self:custom.defaults.logging}}

  # copied from vars.json
  # blockchain: ${{self:custom.vars.blockchain}}
  # thresholdBillingAlarm: ${{self:custom.vars.thresholdBillingAlarm, self:custom.defaults.thresholdBillingAlarm}}
  thresholdThrottlingAlarm: ${{self:custom.vars.thresholdThrottlingAlarm, self:custom.defaults.thresholdThrottlingAlarm}}
  thresholdErrorsAlarm: ${{self:custom.vars.thresholdErrorsAlarm, self:custom.defaults.thresholdErrorsAlarm}}
  thresholdInvocationsAlarm: ${{self:custom.vars.thresholdInvocationsAlarm, self:custom.defaults.thresholdInvocationsAlarm}}
  thresholdDurationAlarm: ${{self:custom.vars.thresholdDurationAlarm, self:custom.defaults.thresholdDurationAlarm}}

  # stage: ${{opt:stage, self:custom.vars.stage, self:custom.defaultStage}}
  # region: ${{opt:region, self:custom.vars.region}}

  # prefixes
  prefix: ${{self:service}}-${{self:custom.stage}}-
  # regionalPrefix: ${{self:service}}-${{self:custom.stage}}-${{self:custom.region}}-
  # prefixRole: ${{self:custom.regionalPrefix}}
  # maybe during info/auth, the server can send back the prefix
  # prefixIOTTopic: ${{self:service}}-
  # iotParentTopic: ${{self:custom.stackName}}
  # prefixSNSTopic: ${{self:custom.prefix}}
  prefixSQS: ${{self:custom.prefix}}
  # apigateway
  # adhere to serverless framework format
  # apiGateway: ${{self:custom.stage}}-${{self:service}}

  # versions
  versionSQL: "2016-03-23"
  s3TemplatesPath: ${{self:custom.version.templatesPath}}

  # sns
  # billingAlarmTopic: ${{self:custom.prefixSNSTopic}}BillingAlarmNotification
  # throttlingAlarmTopic: ${{self:custom.prefixSNSTopic}}ThrottlingAlarmNotification
  # invocationsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationAlarmNotification
  # invocationErrorsAlarmTopic: ${{self:custom.prefixSNSTopic}}InvocationErrorsAlarmNotification

  alertNotifications:
    - protocol: email
      endpoint:
        Ref: OrgAdminEmail
        # Fn::FindInMap: ["org", "contact", "adminEmail"]

  alerts:
    stages:
      - dev
    dashboards: true
    topics:
      # ok:
      #   topic: ${{self:custom.prefix}}alerts-ok
      #   notifications: ${{self:custom.alertNotifications}}
      alarm:
        topic: ${{self:custom.prefix}}alerts-alarm
        notifications: ${{self:custom.alertNotifications}}
      # insufficientData:
      #   topic: ${{self:custom.prefix}}alerts-insufficientData
      #   notifications: ${{self:custom.alertNotifications}}
    definitions:
      functionErrors:
        period: 60
        threshold: ${{self:custom.thresholdErrorsAlarm}}
      functionThrottles:
        period: 60
        threshold: ${{self:custom.thresholdThrottlingAlarm}}
      functionInvocations:
        period: 60
        threshold: ${{self:custom.thresholdInvocationsAlarm}}
      functionDuration:
        period: 60
        threshold: ${{self:custom.thresholdDurationAlarm}}
    alarms:
      # - functionErrors
      # - functionThrottles
      # - functionInvocations
      # - functionDuration

  # sqs
  deadLetterQueueName: ${{self:custom.prefixSQS}}dead-letter-queue

  tables:
    # presence: ${{self:custom.prefix}}presence
    # seals: ${{self:custom.prefix}}seals
    # pubkeys: ${{self:custom.prefix}}pubkeys
    # messages: ${{self:custom.prefix}}messages
    events: ${{self:custom.prefix}}events
    # pushsubscribers: ${{self:custom.prefix}}pushsubscribers
    # users: ${{self:custom.prefix}}users
    # friends: ${{self:custom.prefix}}friends
    # conf: ${{self:custom.prefix}}conf
    # kv: ${{self:custom.prefix}}kv
    # backlinks: ${{self:custom.prefix}}backlinks

  # defaultScaleInOut: &defaultScaleInOut
  #   scaleOut: 0
  #   scaleIn: 60

  # # auto-scaled tables that serve as buckets for multiple models each
  # defaultCapacityRead: &defaultCapacityRead
  #   read:
  #     minimum: 5        # Minimum read capacity
  #     maximum: 100      # Maximum read capacity
  #     usage: 0.70       # Targeted usage percentage
  #     <<: *defaultScaleInOut

  # defaultCapacityWrite: &defaultCapacityWrite
  #   write:
  #     minimum: 5        # Minimum read capacity
  #     maximum: 100      # Maximum read capacity
  #     usage: 0.5        # Targeted usage percentage
  #     <<: *defaultScaleInOut

  # defaultCapacity: &defaultCapacity
  #   <<: *defaultCapacityRead
  #   <<: *defaultCapacityWrite

  # tableBuckets:
  #   count: 1
  #   read:
  #     minimum: 10       # Minimum read capacity
  #     maximum: 500      # Maximum read capacity
  #     usage: 0.70       # Targeted usage percentage
  #     <<: *defaultScaleInOut

  #   write:
  #     minimum: 10       # Minimum read capacity
  #     maximum: 500      # Maximum write capacity
  #     usage: 0.5        # Targeted usage percentage
  #     <<: *defaultScaleInOut

  # dynamodb-autoscaling:
  #   role: AutoScalingDynamoDBRole
  #   capacities:
  #     # bucket-x table scaling is added in compile script

  #     - table: EventsTable
  #       write:
  #         minimum: 5        # Minimum write capacity
  #         maximum: 100      # Maximum write capacity
  #         usage: 0.5        # Targeted usage percentage
  #         <<: *defaultScaleInOut

  cors:
    origin: '*'
    headers:
      - Content-Type
      - Content-Encoding
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - X-Tradle-Sig
      - X-Tradle-Auth
      - cache
    allowCredentials: false

  "@tradle/serverless-offline": ${{self:custom.vars.serverless-offline, self:custom.defaults.serverless-offline}}
  serverless-iot-local: ${{self:custom.vars.serverless-iot-local, self:custom.defaults.serverless-iot-local}}
  # reinitializeOnConfChanged: ${{self:custom.vars.reinitializeOnConfChanged, self:custom.defaults.reinitializeOnConfChanged}}

  # serverless-dynamodb-local settings
  # dynamodb:
  #   start:
  #     port: 4569
  #     # migrate: true
  #     inMemory: true
  #     # use dockerized dynamodb from localstack
  #     noStart: true
  #   # tables:
  #   #   - ${{self:custom.prefix}}events
  #   #   - ${{self:custom.prefix}}bucket-0

  # serverless-s3-local settings
  # s3:
  #   host: 0.0.0.0
  #   port: 4572
  #   # directory: /tmp
  #   buckets:
  #     - ${{self:custom.prefix}}objectsbucket
  #     - ${{self:custom.prefix}}secretsbucket
  #     - ${{self:custom.prefix}}privateconfbucket
  #     - ${{self:custom.prefix}}fileuploadbucket
  #     - ${{self:custom.prefix}}logsbucket
  #   cors: false
  #   # use dockerized s3 from localstack
  #   noStart: true
  #   create: false

  # s3-encryption:
  #   buckets:
  #     SecretsBucket:
  #       SSEAlgorithm: AES256

  logRetentionInDays: 1
  # daysBeforeLogsGoToGlacier: 7

  # issue2233WorkaroundKey: issue2233WorkaroundKey
  # defaultKMSKeyId: ${{self:custom.regionalPrefix}}default-key
  # tradleStackPrefix: tdl-tradle-ltd-${{self:stage}}-
  # tradleStackRegion: us-east-1
  # updatesTopicName: ${{self:custom.tradleStackPrefix}}updates-announcements

#   secrets: ${{file(secrets.${opt:stage, self:provider.stage}}.yml)}
  # dynamodb:
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migration: true
  #   migration:
  #     dir: offline/migrations

provider:
  # avoid some bugs in serverless
  versionFunctions: ${{self:custom.versionFunctions}}
  tracing: true
  # https://github.com/serverless/serverless/issues/4312#issuecomment-331946882
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  name: aws
  runtime: nodejs14.x
  nodeVersion: 'v14.x.x'
  profile: ${{self:custom.profile}}
  stage: ${{self:custom.stage}}
  region: ${{self:custom.region}}
  removeOldDeployments: false
  memorySize: 512
  timeout: 60
  # deploymentBucket: io.tradle.${{self:custom.stage}}.deploys
  # deploymentBucket: ${{self:custom.vars.deploymentBucket, self:custom.defaultVars.deploymentBucket}}
  deploymentBucket: ${{self:custom.deploymentBucket}}
  environment:
    NODE_OPTIONS: "--no-warnings --no-deprecation"
    # enable long stack traces
    BLUEBIRD_DEBUG: 1
    # IOT_TOPIC_PREFIX: ${{self:custom.prefixIOTTopic}}
    STACK_NAME:
      Ref: AWS::StackName
    BLOCKCHAIN:
      Ref: BlockchainNetwork
    SEALING_MODE:
      Ref: SealingMode
    SEAL_BATCHING_PERIOD:
      Ref: SealBatchingPeriodInMinutes
    CORDA_API_URL: ${{self:custom.corda.apiUrl}}
    CORDA_API_KEY: ${{self:custom.corda.apiKey}}
    DEBUG: ${{self:custom.vars.debug.filter, self:custom.defaults.debug.filter}}
    DEBUG_LEVEL: ${{self:custom.vars.debug.level, self:custom.defaults.debug.level}}
    DEBUG_FORMAT: ${{self:custom.vars.debug.format, self:custom.defaults.debug.format}}
    # SERVERLESS_PREFIX: ${{self:custom.prefix}}
    # STACK_STAGE: ${{self:custom.stage}}
    # SERVERLESS_SERVICE_NAME: ${{self:service}}
    STACK_STAGE:
      Ref: Stage
    NO_TIME_TRAVEL: false # allow time-travel messages for now
    ENABLE_XRAY:
      Ref: EnableTracing
    R_STACK:
      Ref: AWS::StackId
    R_BUCKET_Objects:
      Fn::GetAtt: Buckets.Outputs.Objects
    R_BUCKET_Secrets:
      Fn::GetAtt: Buckets.Outputs.Secrets
    R_BUCKET_FileUpload:
      Fn::GetAtt: Buckets.Outputs.FileUpload
    R_BUCKET_Logs:
      Fn::GetAtt: Buckets.Outputs.Logs
    R_BUCKET_PrivateConf:
      Fn::GetAtt: Buckets.Outputs.PrivateConf
    R_BUCKET_ServerlessDeployment:
      Fn::GetAtt: Buckets.Outputs.Deployment
    R_KEY_DefaultEncryption:
      Fn::GetAtt: Keys.Outputs.EncryptionKey
    R_TABLE_Events:
      Fn::GetAtt: Tables.Outputs.Events
    R_TABLE_Bucket0:
      Fn::GetAtt: Tables.Outputs.Bucket0
    R_RESTAPI_ApiGateway:
      Fn::GetAtt: Source.Outputs.ApiGatewayRestApi
    R_ROLE_IotClient:
      Fn::GetAtt: IAM.Outputs.IotClientRole
# this is used only for pr9ovisioned scaling
    R_ROLE_AutoScalingDynamoDB:
      Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole
    R_TOPIC_AdminAlerts:
      Ref: AwsAlertsAlarm
    IOT_ENDPOINT:
      Fn::GetAtt: Discovery.Outputs.IotEndpoint

  apiKeys:
    - Fn::Sub: 'issue2233WorkaroundKey1-${AWS::StackName}'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::Join:
          - ''
          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'
            - Fn::GetAtt: Tables.Outputs.Events
        - Fn::Join:
          - ''
          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'
            - Fn::GetAtt: Tables.Outputs.Events
            - '/index/*'
        - Fn::Join:
          - ''
          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'
            - Fn::GetAtt: Tables.Outputs.Bucket0
        - Fn::Join:
          - ''
          - - Fn::Sub: 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/'
            - Fn::GetAtt: Tables.Outputs.Bucket0
            - '/index/*'


    - Effect: Allow
      Action:
        # so lambdas can list resources in their stack
        - cloudformation:ListStackResources
        - CloudFormation:DescribeStacks
        # need to get own template to generate a child deployment template
        - cloudformation:GetTemplate
        - cloudformation:UpdateTerminationProtection
        # - cloudformation:UpdateStack
      Resource:
        Fn::Sub: 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'

    # - Effect: Allow
    #   Action:

    #   Resource:
    #     Ref: AWS::StackId

    # allow lambdas to update themselves / each other
    - Effect: Allow
      Action:
        - lambda:UpdateFunctionConfiguration
        - lambda:ListFunctions
      # This action does not support resource-level permissions
      Resource: "*"

    # allow lambdas to call each other
    # TODO: make this more fine grained
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - lambda:AddPermission
        - lambda:GetPolicy
      Resource: "*"

    - Effect: Allow
      Action:
        - lambda:GetFunctionConfiguration
      Resource:
        - Fn::Sub: 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-*'

    # allow access to bucket
    # TODO: give access only to the lambdas that need it
    - Effect: Allow
      Action:
        # needed to get NoSuchKey error instead of AccessDenied for non-existent items
        # https://forums.aws.amazon.com/thread.jspa?threadID=56531
        - s3:ListBucket
        - s3:PutBucketReplication
        - s3:PutBucketVersioning
        - s3:GetBucketPolicy
        # needed to create regional deployment buckets
        - s3:CreateBucket
        # # needed to enable bucket encryption
        # - s3:PutEncryptionConfiguration
      Resource:
        # Fn::Join:
        #   - ''
        #   - - "arn:aws:s3:::"
        #     - Ref: AWS::StackName
        #     - "-*"
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Objects
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Secrets
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.PrivateConf
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.FileUpload
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Logs
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Deployment
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Ref: AWS::StackName
            # needed to manipulate regional buckets
            - '-deploymentbucket-*'
        # same purpose as previous, for backwards compat
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Ref: AWS::StackName
            # needed to manipulate regional buckets
            - '-serverlessdeploymentbucket-*'

    - Effect: Allow
      Action:
        - organizations:*
      Resource: "*"

    - Effect: Allow
      Action:
        - s3:PutObject
        # needed to create an object with public-read
        - s3:PutObjectAcl
        - s3:GetObject
      Resource:
        # Fn::Join:
        #   - ''
        #   - - "arn:aws:s3:::"
        #     - Ref: AWS::StackName
        #     - "-*/*"

        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Objects
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Secrets
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.PrivateConf
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.FileUpload
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Logs
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Fn::GetAtt: Buckets.Outputs.Deployment
            - '/*'
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Ref: AWS::StackName
            # needed to manipulate regional buckets
            - '-deploymentbucket-*/*'
        # same purpose as previous, for backwards compat
        - Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - Ref: AWS::StackName
            # needed to manipulate regional buckets
            - '-serverlessdeploymentbucket-*/*'


    # - Effect: Allow
    #   Action:
    #     - s3:DeleteObject
    #     - s3:DeleteObjectVersion
    #   Resource:
    #     # currently only needed to delete terms and conditions
    #     - Fn::Join:
    #       - ""
    #       - - "arn:aws:s3:::"
    #         - Fn::GetAtt: Buckets.Outputs.PrivateConf
    #         - "/conf/*"

    - Effect: Allow
      Action:
        - s3:GetBucketLocation
        - s3:ListAllMyBuckets
      Resource: "arn:aws:s3:::*"

    - Effect: Allow
      Action:
        - sns:AddPermission
        - sns:CreateTopic
        - sns:DeleteTopic
        - sns:Publish
        - sns:Subscribe
        - sns:Unsubscribe
        - sns:ListSubscriptions
        - sns:ListSubscriptionsByTopic
        - sns:GetTopicAttributes
        - sns:SetTopicAttributes
      Resource: "*"

    # Iot
    - Effect: Allow
      Action: ["iot:Connect", "iot:Subscribe", "iot:Publish", "iot:Receive", "iot:DescribeEndpoint"]
      Resource: "*"

    # gen Iot temp credentials (lambda: preauth)
    - Effect: Allow
      Action:
        - sts:AssumeRole
      Resource:
        - Fn::GetAtt: IAM.Outputs.IotClientRole
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: Allow
      Sid: AllowCloudFrontUpdateDistribution
      Action:
        - cloudfront:updateDistribution
      Resource: "*"

    # - Effect: Allow
    #   Action:
    #     - apigateway:GET
    #     - apigateway:PUT
    #   Resource:
    #     Fn::Join:
    #       - ""
    #       - - "arn:aws:apigateway:"
    #         - Ref: AWS::Region
    #         - "::/restapis/"
    #         - Ref: ApiGatewayRestApi
    #         - "/*"

    # - Effect: Allow
    #   Action:
    #     - apigateway:POST
    #   Resource:
    #     Fn::Join:
    #       - ""
    #       - - "arn:aws:apigateway:"
    #         - Ref: AWS::Region
    #         - "::/restapis/"
    #         - Ref: ApiGatewayRestApi

    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:GetIdentityVerificationAttributes
      Resource: "*"

    - Effect: Allow
      Action:
        - cloudwatch:PutMetricAlarm
        - cloudwatch:DescribeAlarms
        - cloudwatch:DescribeAlarmsForMetric
      Resource: '*'

    - Effect: Allow
      Action:
        - kms:Decrypt
        - kms:GenerateDataKey
      Resource:
        - Fn::GetAtt: Keys.Outputs.EncryptionKeyArn

    - Effect: Allow
      Action:
        - kms:Encrypt
        - kms:Decrypt
        - kms:GenerateDataKey
      Resource:
        - Fn::If:
          - DoEncryptBuckets
          - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn
          - Ref: AWS::NoValue

    - Effect: Allow
      Action:
        - textract:*
      Resource: '*'

    - Effect: Allow
      Action:
        - athena:*
      Resource: '*'

    - Effect: Allow
      Action:
        - glue:*
      Resource: '*'

    # - Effect: Allow
    #   Action:
    #     - 'ssm:GetParameter*'
    #     - 'ssm:PutParameter*'
    #   Resource:
    #     - 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/tradle/${{self:custom.prefix}}*'

    # - Effect: Allow
    #   Action:
    #     # TODO: narrow this down
    #     # look out for error: "The specified log group does not exist"
    #     - logs:*
    #     # - logs:PutSubscriptionFilter
    #     # - logs:DeleteSubscriptionFilter
    #   Resource: "*"

functions:
  # httpRouter:
  #   handler: lib/in-house-bot/lambda/http/router.handler
  #   memorySize: 1024
  #   events:
  #     - http:
  #         # this matches any path, the token 'ANY' doesn't mean anything special
  #         path: /{any+}
  #         method: get
  #         cors: ${{self:custom.cors}}

  #     - http:
  #         # this matches any path, the token 'ANY' doesn't mean anything special
  #         path: /{any+}
  #         method: post
  #         cors: ${{self:custom.cors}}

  #     - http:
  #         # this matches any path, the token 'ANY' doesn't mean anything special
  #         path: /{any+}
  #         method: put
  #         cors: ${{self:custom.cors}}

  # 1. generates temporary credentials (STS) for new connections,
  #    and assumes IotClientRole on them
  # 2. creates an unauthenticated session,
  #    generates a challenge to be signed (verified in /auth)
  preauth:
    handler: lib/in-house-bot/lambda/http/preauth.handler
    memorySize: 1024
    events:
      - http:
          path: preauth
          method: post
          cors: ${{self:custom.cors}}

  # 1. validates the challenge response
  # 2. marks the session as authenticated
  auth:
    handler: lib/in-house-bot/lambda/http/auth.handler
    memorySize: 1024
    events:
      - http:
          path: auth
          method: post
          cors: ${{self:custom.cors}}

  inbox:
    handler: lib/in-house-bot/lambda/http/inbox.handler
    memorySize: 1024
    events:
      - http:
          path: inbox
          method: put
          cors: ${{self:custom.cors}}
      - http:
          path: inbox
          method: post
          cors: ${{self:custom.cors}}

  # delivery-retry:
  #   handler: lib/in-house-bot/lambda/delivery-retry.handler
  #   memorySize: 128
  #   timeout: 60
    # events:
    #   - schedule:
    #       rate: rate(1 minute)
    #       enabled: true

  # triggered when an internal bot requests a message range (inbound messages)
  # inbox:
  #   handler: lib/lambda/inbox.handler
  #   memorySize: 1024
  #   events:
  #     - iot:
  #         sql: "SELECT * as data, topic() as topic FROM 'messages/get'"

  # triggered when a client requests a message range (outbound messages)
  # outbox:
  #   handler: lib/lambda/outbox.handler
  #   memorySize: 1024
  #   events:
  #     - iot:
  #         sql: "SELECT * as data, topic() as topic FROM '+/restore'"

  #   environment:
  #     DEBUG: tradle:*

  # handles IoT (MQTT) connections post-authentication
  # updates presence in PresenceTable

  oniotlifecycle:
    handler: lib/in-house-bot/lambda/mqtt/oniotlifecycle.handler
    events:
      # - iot:
      #     sql: "SELECT * as data, topic() as topic FROM '$aws/events/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')"
      #     sqlVersion: ${{self:custom.versionSQL}}
      # - iot:
      #     sql: "SELECT * as data, topic() as topic FROM '$aws/events/presence/connected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')"
      #     sqlVersion: ${{self:custom.versionSQL}}
      # - iot:
      #     sql: "SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')"
      #     sqlVersion: ${{self:custom.versionSQL}}

      - iot:
          sql:
            Fn::Sub: "SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${AWS::StackName}-')"
          sqlVersion: ${{self:custom.versionSQL}}
      - iot:
          sql:
            Fn::Sub: "SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${AWS::StackName}-')"
          sqlVersion: ${{self:custom.versionSQL}}

      # - iot:
      #     sql: "SELECT * as data, topic() as topic FROM '$aws/events/subscriptions/subscribed/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')"
      #     sqlVersion: ${{self:custom.versionSQL}}
      # - iot:
      #     sql: "SELECT * as data, topic() as topic FROM '$aws/events/presence/disconnected/#' WHERE startswith(clientId, '${{self:custom.iotClientIdPrefix}}')"
      #     sqlVersion: ${{self:custom.versionSQL}}

    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations

  # onconnect:
  #   handler: lib/in-house-bot/lambda/mqtt/onconnect.handler
  #   events:
  #     - iot:
  #         sql: "SELECT * FROM '$aws/events/presence/connected/#'"
  #         sqlVersion: ${{self:custom.versionSQL}}
  #   alarms:
  #     - functionErrors
  #     - functionThrottles
  #     - functionInvocations

  # triggered when a client sends a message
  #
  # validates, stores in MessagesTable, in ObjectsBucker (for now),
  # and passes off to bot engine
  onmessage:
    handler: lib/in-house-bot/lambda/mqtt/onmessage.handler
    memorySize: 1024
    #   SERVERLESS_PREFIX: ${{self:custom.prefix}}
    #   STACK_STAGE: ${{self:custom.stage}}
    #   SERVERLESS_SERVICE_NAME: ${{self:service}}
    events:
      - iot:
          sql:
            Fn::Sub: "SELECT encode(*, 'base64') as data, clientid() as clientId, topic() as topic FROM '${AWS::StackName}/+/pub/outbox'"
          sqlVersion: ${{self:custom.versionSQL}}
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations

  # same as onmessage, but can handle larger payloads
  # MQTT is limited to 128KB, HTTP to 6MB
  # onmessage_http:
  #   handler: lib/in-house-bot/lambda/http/onmessage.handler
  #   memorySize: 1024
  #   events:
  #     - http:
  #         path: message
  #         method: put
  #     - http:
  #         path: message
  #         method: post
  #   alarms:
  #     - functionErrors
  #     - functionThrottles
  #     - functionInvocations

  # performs service discovery - builds a map of logical->physical ids
  # and writes that map to the environment variables of all other lambdas
  # setenvvars:
  #   handler: lib/lambda/setenvvars.handler
  #   # hack to enable discovery own function's own stack
  #   description:
  #     Ref: AWS::StackId

  # initializes provider identity
  # generates a new identity and keys, and other misc crap
  # init:
  #   handler: lib/lambda/init.handler
  #   memorySize: 256
  #   timeout: 300
  #   alarms:
  #     - functionErrors
  #     - functionThrottles
  #     - functionInvocations

  # setstyle:
  #   handler: lib/lambda/setstyle.handler
  #   memorySize: 128
  #   alarms:
  #     - functionErrors
  #     - functionThrottles
  #     - functionInvocations

  # precreate-tables:
  #   handler: lib/lambda/precreate-tables.handler
  #   memorySize: 128
  #   timeout: 300

  # Blockchain

  # bitcoin faucet (surprise!)
  # distributes testnet coins from local funds
  # faucet_bitcoin:
  #   handler: lib/lambda/faucet-bitcoin.withdraw

  # gets funds from a bitcoin testnet faucet
  # recharge_bitcoin:
  #   handler: lib/lambda/recharge-bitcoin.handler
  #   events:
  #     - schedule:
  #         rate: rate(10 minutes)
  #         enabled: false

  # get funds from ethereum testnet faucet
  # (doesn't work on rinkeby, and doesn't work well on ropsten)
  # recharge_ethereum:
  #   handler: lib/lambda/recharge-ethereum.handler
  #   events:
  #     - schedule:
  #         rate: rate(10 minutes)
  #         enabled: false

  # writes pending transactions to the blockchain
  jobScheduler:
    handler: lib/in-house-bot/lambda/job-scheduler.handler
    memorySize: 256
    timeout: 30
    events:
      - schedule:
          rate: rate(1 minute)
    # alarms:
    #   - functionErrors
    #   # - functionThrottles
    #   # - functionInvocations

  genericJobRunner:
    handler: lib/in-house-bot/lambda/job-runner.handler
    memorySize: 1024
    timeout: 900
    alarms:
      - functionErrors
      - functionInvocations

  # polls the status of unconfirmed blockchain transactions
  # pollchain:
  #   handler: lib/in-house-bot/lambda/pollchain.handler
  #   memorySize: 256
  #   timeout: 300
  #   # events:
  #   #   - schedule:
  #   #       rate: rate(10 minutes)
  #   #       # enabled: false
  #   alarms:
  #     - functionErrors
  #     # - functionThrottles
  #     # - functionInvocations

  #   # environment:
  #   #   ENCRYPTION_KEY: ${{self:custom.secrets.SESSION_KEY}}
  #   #   EMAIL_SERVICE_API_KEY: ${{self:custom.secrets.EMAIL_SERVICE_API_KEY}}

  # check-failed-seals:
  #   handler: lib/in-house-bot/lambda/check-failed-seals.handler
  #   memorySize: 256
  #   timeout: 60
  #   # events:
  #   #   - schedule:
  #   #       rate: rate(17 minutes)
  #   #       # enabled: false
  #   alarms:
  #     - functionErrors

  # force reinitialize lambda containers
  # reinitializeContainers:
  #   handler: lib/in-house-bot/lambda/reinitialize-containers.handler

  # useful during development
  # trigger a message to be queued/sent to a user
  # send:
  #   handler: lib/in-house-bot/lambda/send.handler
  #   memorySize: 256

  info:
    handler: lib/in-house-bot/lambda/http/info.handler
    memorySize: 256
    events:
      - http:
          path: info
          method: get
          cors: ${{self:custom.cors}}

  # rename later, temporarily can't rename, get AWS error:
  #   "Modifying service token is not allowed.."
  bot_oninit:
    handler: lib/in-house-bot/lambda/oninit.handler
    memorySize: 1024
    timeout: 900

  # onsealstream:
  #   handler: lib/in-house-bot/lambda/onsealstream.handler
  #   memorySize: 256
  #   events:
  #     - stream:
  #         type: dynamodb
  #         batchSize: 1
  #         startingPosition: TRIM_HORIZON
  #         arn:
  #           Fn::GetAtt:
  #             - SealsTable
  #             - StreamArn
  #   alarms:
  #     - functionErrors

  # onmessagestream:
  #   handler: lib/in-house-bot/lambda/onmessagestream.handler
  #   memorySize: 256
  #   events:
  #     - stream:
  #         type: dynamodb
  #         batchSize: 100
  #         startingPosition: TRIM_HORIZON
  #         arn:
  #           Fn::GetAtt:
  #             - MessagesTable
  #             - StreamArn
  #   alarms:
  #     - functionErrors
  #     # - functionThrottles
  #     # - functionInvocations
  #   # onError:
  #     # Ref: DeadLetterQueue

  onresourcestream:
    handler: lib/in-house-bot/lambda/onresourcestream.handler
    memorySize: 256
    events:
      - stream:
          type: dynamodb
          batchSize: 20
          startingPosition: TRIM_HORIZON
          arn:
            Fn::GetAtt: Tables.Outputs.Bucket0Stream
    alarms:
      - functionErrors

  graphql:
    # make sure graphql route gets loaded
    handler: lib/in-house-bot/lambda/http/graphql.handler
    memorySize: 1024
    events:
      - http:
          path: graphql
          method: get
          cors: ${{self:custom.cors}}
      - http:
          path: graphql
          method: post
          cors: ${{self:custom.cors}}
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations

  # setstyle:
  #   handler: lib/in-house-bot/lambda/set-style.handler
  #   memorySize: 128

  setconf:
    handler: lib/in-house-bot/lambda/set-conf.handler
    memorySize: 1024

  # addfriend:
  #   handler: lib/in-house-bot/lambda/add-friend.handler
  #   memorySize: 256

  # addfriend_dev:
  #   handler: lib/in-house-bot/lambda/add-friend.handlerHttp
  #   # dev mode only
  #   events:
  #     - http:
  #         path: /addfriend
  #         method: post

  # addcontact:
  #   handler: lib/in-house-bot/lambda/add-contact.handler
  #   environment:
  #     DEBUG: tradle:*

  # bot-serviced lambda
  # generates sample data for browsing with GraphQL
  # samples:
  #   handler: lib/in-house-bot/lambda/samples.handler
  #   memorySize: 1024

  # samples_dev:
  #   handler: lib/in-house-bot/lambda/samples.handler
  #   memorySize: 1024
  #   events:
  #     - http:
  #         path: samples
  #         method: post

  import_data_utils:
    handler: lib/in-house-bot/lambda/import-data-utils.handler

  # import_data_bundle:
  #   handler: lib/in-house-bot/lambda/import-data-bundle.handler

  # create_data_claim:
  #   handler: lib/in-house-bot/lambda/create-data-claim.handler

  # get_data_bundle:
  #   handler: lib/in-house-bot/lambda/get-data-bundle.handler

  # onfido_register:
  #   handler: lib/in-house-bot/lambda/onfido-register.handler

  onfido:
    handler: lib/in-house-bot/lambda/http/onfido-webhook.handler
    memorySize: 1024
    events:
      - http:
          path: onfido
          method: post
          cors: ${{self:custom.cors}}

  cli:
    handler: lib/in-house-bot/lambda/cli.handler
    timeout: 300

  documentChecker:
    handler: lib/in-house-bot/lambda/http/documentChecker-webhook.handler
    memorySize: 1024
    events:
      - http:
          path: documentChecker
          method: post
          cors: ${{self:custom.cors}}
  # qr:
  #   handler: lib/in-house-bot/lambda/http/qr.handler
  #   events:
  #     - http:
  #         path: qr
  #         method: get
  #         cors: ${{self:custom.cors}}

  deploymentPingback:
    handler: lib/in-house-bot/lambda/http/deployment-pingback.handler
    # timeout: 300
    events:
      - http:
          path: deploymentPingback
          method: post
          cors: ${{self:custom.cors}}

  confirmation:
    handler: lib/in-house-bot/lambda/http/confirmation.handler
    events:
      - http:
          path: confirmation
          method: get
          cors: ${{self:custom.cors}}

  # onChildStackStatusChanged:
  #   handler: lib/in-house-bot/lambda/sns/on-child-stack-status-changed.handler
    # events added dynamically in "deployment.subscribeToChildStackStatusAlerts"

  # not used at the moment
  # updateStack:
  #   handler: lib/in-house-bot/lambda/update-stack.handler
    # role: UpdateStackIamRole
    # events added dynamically

  logProcessor:
    handler: lib/in-house-bot/lambda/log-processor.handler
    reservedConcurrency: 51
    # events added in compile phase

  logAlertProcessor:
    handler: lib/in-house-bot/lambda/log-alert-processor.handler
    reservedConcurrency: 51
    # events added at runtime

  # shortToLongUrlMapping:
  #   handler: lib/in-house-bot/lambda/http/short-to-long-url-mapping.handler
  #   events:
  #     - http:
  #         path: l/{any+}
  #         method: get
  #         cors: ${{self:custom.cors}}

resources:
  Parameters:
    Refresh:
      Type: String
      Default: "1.0"

    SourceDeploymentBucket:
      Type: String
      Default: ""

    # Existing Resources group
    ExistingEventsTable:
      Type: String
      Default: ""

    ExistingBucket0Table:
      Type: String
      Default: ""

    ExistingBucket0TableStreamArn:
      Type: String
      Default: ""

    ExistingObjectsBucket:
      Type: String
      Default: ""

    ExistingSecretsBucket:
      Type: String
      Default: ""

    ExistingPrivateConfBucket:
      Type: String
      Default: ""

    ExistingFileUploadBucket:
      Type: String
      Default: ""

    ExistingLogsBucket:
      Type: String
      Default: ""

    ExistingEncryptionKey:
      Type: String
      Default: ""
      Description: KMS key id, if you want to use an existing one instead of creating a new one

    ExistingBucketEncryptionKey:
      Type: String
      Default: ""
      Description: KMS key id, if you want to use an existing one instead of creating a new one

    ExistingDeploymentBucket:
      Type: String
      Default: ""

    ExistingApiGatewayRestApi:
      Type: String
      Default: ""

    ExistingApiGatewayRestApiRootResourceId:
      Type: String
      Default: ""

    # Organization Info group

    OrgName:
      Type: String
      Description: your organization's name, as you want users to see it (e.g. Example, Inc)

    OrgDomain:
      Type: String
      Description: a domain or subdomain you own (e.g. example.com)

    OrgLogo:
      Type: String
      Description: a publically accessible url for your logo image (e.g. https://example.com/logo.jpeg)

    OrgAdminEmail:
      Type: String
      Description: your AWS admin's email (e.g. jojo@example.com)

    # Configuration group

    BlockchainNetwork:
      Type: String
      Default: 'ethereum:rinkeby'
      AllowedValues:
        - 'ethereum:mainnet'
        - 'ethereum:rinkeby'
        - 'ethereum:ropsten'

    SealingMode:
      Type: String
      Default: 'single'
      AllowedValues:
        - 'single'
        - 'batch'

    SealBatchingPeriodInMinutes:
      Type: Number
      Description: how often to batch items for sealing (ignore if SealingMode is 'single')
      Default: 5

    ProvisionDynamoDBScaling:
      Type: String
      Default: "false"
      AllowedValues:
        - "true"
        - "false"

    PointInTimeRecoveryEnabledEventsTable:
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"

    PointInTimeRecoveryEnabledBucket0Table:
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"

    # default to deleting logs
    # by setting transition days > TTL days
    LogsDaysBeforeTransitionToGlacier:
      Type: Number
      Description: days before logs are transitioned to Amazon Glacier
      Default: 3

    LogsTTL:
      Type: Number
      Description: days before logs are deleted from Amazon Glacier
      Default: 10

    EncryptBuckets:
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"

    EncryptTables:
      Type: String
      Default: "true"
      AllowedValues:
        - "true"
        - "false"

    EnableTracing:
      Type: String
      Default: "false"
      AllowedValues:
        - "true"
        - "false"

    # Stack Info group

    Stage:
      Type: String
      Default: dev
      AllowedValues:
        - dev
        - prod

  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        - Label:
            default: "Organization Info"
          Parameters:
            - OrgName
            - OrgDomain
            - OrgLogo
            - OrgAdminEmail

        - Label:
            default: "Configuration"
          Parameters:
            - BlockchainNetwork
            - PointInTimeRecoveryEnabledEventsTable
            - PointInTimeRecoveryEnabledBucket0Table
            - ProvisionDynamoDBScaling
            - LogsDaysBeforeTransitionToGlacier
            - LogsTTL
            - EncryptBuckets
            - EncryptTables
            - EnableTracing

        - Label:
            default: "Stack Info"
          Parameters:
            - Stage
            - Refresh

        - Label:
            default: "Existing Resources (ignore if this is a new deployment)"
          Parameters:
            - ExistingEventsTable
            - ExistingBucket0Table
            - ExistingBucket0TableStreamArn
            - ExistingObjectsBucket
            - ExistingSecretsBucket
            - ExistingPrivateConfBucket
            - ExistingFileUploadBucket
            - ExistingLogsBucket
            - ExistingDeploymentBucket
            - ExistingEncryptionKey
            - ExistingBucketEncryptionKey
            - ExistingApiGatewayRestApi
            - ExistingApiGatewayRestApiRootResourceId

      ParameterLabels:
        # Existing Resources
        ExistingEventsTable:
          default: "Events Table"
        ExistingBucket0Table:
          default: "Bucket0 Table"
        ExistingBucket0TableStreamArn:
          default: "Bucket0 Table Stream Arn"
        ExistingObjectsBucket:
          default: "Objects Bucket"
        ExistingSecretsBucket:
          default: "Secrets Bucket"
        ExistingPrivateConfBucket:
          default: "PrivateConf Bucket"
        ExistingFileUploadBucket:
          default: "FileUpload Bucket"
        ExistingLogsBucket:
          default: "Logs Bucket"
        ExistingDeploymentBucket:
          default: "Deployment Bucket"
        ExistingEncryptionKey:
          default: "Encryption Key"
        ExistingBucketEncryptionKey:
          default: "Bucket Encryption Key"

        ExistingApiGatewayRestApi:
          default: "ApiGateway RestApi Id"
        ExistingApiGatewayRestApiRootResourceId:
          default: "ApiGateway RestApi root resource id"

        # Organization Info
        OrgName:
          default: Name
        OrgDomain:
          default: Domain
        OrgLogo:
          default: Logo URL
        OrgAdminEmail:
          default: Admin Email

        # Configuration

        ## Blockchain configuration
        BlockchainNetwork:
          default: Blockchain Network
        SealingMode:
          default: Sealing Mode
        SealBatchingPeriodInMinutes:
          default: Seal batching period (in minutes)

        ## Other configuration
        PointInTimeRecoveryEnabledEventsTable:
          default: Enable point-in-time recovery for the Events table
        PointInTimeRecoveryEnabledBucket0Table:
          default: Enable point-in-time recovery for the Bucket0 table
        ProvisionDynamoDBScaling:
          default: Use DynamoDB provisioned auto-scaling policy
        LogsDaysBeforeTransitionToGlacier:
          default: days before logs are transitioned from to Glacier
        LogsTTL:
          default: days before logs are deleted forever (from Glacier)
        EncryptBuckets:
          default: encrypt buckets
        EncryptTables:
          default: encrypt tables
        EnableTracing:
          default: enable AWS X-Ray tracing for lambda functions

        # Stack Info
        Stage:
          default: Stage

  Mappings:
    # org:
    #   init: ${{self:custom.org}}
    #   contact:
    #     adminEmail: ${{self:custom.emailForNotifications}}

    deployment:
      init:
        # service: ${{self:service}}
        # stage: ${{self:custom.stage}}
        stackName: ${{self:custom.stackName}}
        # encryptionKey:
        # which MyCloud generated the template
        referrerUrl: ''
        deploymentUUID: ''

  Conditions:
    DoProvisionDynamoDBScaling:
      Fn::Equals:
        - Ref: ProvisionDynamoDBScaling
        - "true"

    DoCreateDeploymentBucket:
      Fn::Equals:
        - Ref: ExistingDeploymentBucket
        - ""

    DoCreateApiGatewayRestApi:
      Fn::Or:
        - Fn::Equals:
          - Ref: ExistingApiGatewayRestApi
          - ""
        - Fn::Equals:
          - Ref: ExistingApiGatewayRestApiRootResourceId
          - ""

    DoEncryptBuckets:
      Fn::Equals:
        - Ref: EncryptBuckets
        - "true"

    UseSourceDeploymentBucket:
      Fn::Not:
        - Fn::Equals:
          - Ref: SourceDeploymentBucket
          - ""

  Resources:
    Source:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Join:
            - ''
            - - https://
              - Fn::If:
                - UseSourceDeploymentBucket
                - Ref: SourceDeploymentBucket
                - Ref: ServerlessDeploymentBucket
              - .s3.amazonaws.com/${{self:custom.s3TemplatesPath}}
              - /echo.json
        Parameters:
          SourceDeploymentBucket:
            Fn::If:
              - UseSourceDeploymentBucket
              - Ref: SourceDeploymentBucket
              - Ref: ServerlessDeploymentBucket
          ApiGatewayRestApi:
            Fn::If:
              - DoCreateApiGatewayRestApi
              - Ref: ApiGatewayRestApi
              - Ref: ExistingApiGatewayRestApi
          ApiGatewayRestApiRootResourceId:
            Fn::If:
              - DoCreateApiGatewayRestApi
              - Fn::GetAtt: ApiGatewayRestApi.RootResourceId
              - Ref: ExistingApiGatewayRestApiRootResourceId

    # has to be here for serverless to pick it up
    ServerlessDeploymentBucket:
      Type: AWS::S3::Bucket
      Condition: DoCreateDeploymentBucket
      Description: destination for lambda code, templates, and other deployment assets
      DeletionPolicy: Retain
      Properties:
        VersioningConfiguration:
          Status: Enabled

    Discovery:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/discovery.json'

    Keys:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/keys.json'
        Parameters:
          Namespace:
            Ref: AWS::StackName
          ExistingEncryptionKey:
            Ref: ExistingEncryptionKey
          ExistingBucketEncryptionKey:
            Ref: ExistingBucketEncryptionKey
          NeedBucketEncryptionKey:
            Ref: EncryptBuckets

    Tables:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/tables.json'
        Parameters:
          Refresh:
            Ref: Refresh
          Namespace:
            Ref: AWS::StackName
          ExistingEventsTable:
            Ref: ExistingEventsTable
          ExistingBucket0Table:
            Ref: ExistingBucket0Table
          ExistingBucket0TableStreamArn:
            Ref: ExistingBucket0TableStreamArn
          PointInTimeRecoveryEnabledEventsTable:
            Ref: PointInTimeRecoveryEnabledEventsTable
          PointInTimeRecoveryEnabledBucket0Table:
            Ref: PointInTimeRecoveryEnabledBucket0Table
          Encrypt:
            Ref: EncryptTables
          ProvisionDynamoDBScaling:
            Ref: ProvisionDynamoDBScaling
          EncryptionKey:
            Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias


    Buckets:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/buckets.json'
        Parameters:
          ExistingObjectsBucket:
            Ref: ExistingObjectsBucket
          ExistingSecretsBucket:
            Ref: ExistingSecretsBucket
          ExistingPrivateConfBucket:
            Ref: ExistingPrivateConfBucket
          ExistingFileUploadBucket:
            Ref: ExistingFileUploadBucket
          ExistingLogsBucket:
            Ref: ExistingLogsBucket
          ExistingDeploymentBucket:
            Fn::If:
              - DoCreateDeploymentBucket
              - Ref: ServerlessDeploymentBucket
              - Ref: ExistingDeploymentBucket # ServerlessDeploymentBucket
          LogsDaysBeforeTransitionToGlacier:
            Ref: LogsDaysBeforeTransitionToGlacier
          LogsTTL:
            Ref: LogsTTL
          EncryptionKey:
            Fn::If:
              - DoEncryptBuckets
              - Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias
              - ""

    IAM:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/iam.json'
        Parameters:
          Namespace:
            Ref: AWS::StackName
          ObjectsBucket:
            Fn::GetAtt: Buckets.Outputs.Objects
          SecretsBucket:
            Fn::GetAtt: Buckets.Outputs.Secrets
          PrivateConfBucket:
            Fn::GetAtt: Buckets.Outputs.PrivateConf
          FileUploadBucket:
            Fn::GetAtt: Buckets.Outputs.FileUpload
          LogsBucket:
            Fn::GetAtt: Buckets.Outputs.Logs
          DeploymentBucket:
            Fn::GetAtt: Buckets.Outputs.Deployment
          IotParentTopic:
            Ref: AWS::StackName
          BucketEncryptionKeyArn:
            Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyArn

    RefData:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/refdata.json'
        Parameters:
          Namespace:
            Ref: AWS::StackName
          PrivateConfBucket:
            Fn::GetAtt: Buckets.Outputs.PrivateConf

    AutoScalingEventsTable:
      Type: AWS::CloudFormation::Stack
      Condition: DoProvisionDynamoDBScaling
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-events-table.json'
        Parameters:
          Table:
            Fn::GetAtt: Tables.Outputs.Events
          AutoScalingDynamoDBRole:
            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole

    AutoScalingBucketTable:
      Type: AWS::CloudFormation::Stack
      Condition: DoProvisionDynamoDBScaling
      Properties:
        TemplateURL:
          Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}/autoscale-bucket-table.json'
        Parameters:
          Table:
            Fn::GetAtt: Tables.Outputs.Bucket0
          AutoScalingDynamoDBRole:
            Fn::GetAtt: IAM.Outputs.AutoScalingDynamoDBRole

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Condition: DoCreateApiGatewayRestApi
      DeletionPolicy: Retain
      Properties:
        Name:
          Ref: AWS::StackName
        BinaryMediaTypes:
          - "*/*"

    AwsAlertsAlarm:
      Type: AWS::SNS::Topic
      Properties:
        TopicName:
          Fn::Join:
            - '-'
            - - Ref: AWS::StackName
              - alerts-alarm

        Subscription:
        - Protocol: email
          Endpoint:
            Ref: OrgAdminEmail
            # Fn::FindInMap:
            # - org
            # - contact
            # - adminEmail

    Initialize:
      Type: Custom::InitializeDeployment
      DependsOn:
        - Discovery
        - Buckets
        - Keys
        - Tables
        - IAM
        - ApiGatewayApiKey1
        - IamRoleLambdaExecution
      Properties:
        ServiceToken:
          Fn::GetAtt: [BotUnderscoreoninitLambdaFunction, Arn]
        commit: ${{self:custom.version.commit}}
        name:
          Ref: OrgName
          # Fn::FindInMap: ["org", "init", "name"]
        domain:
          Ref: OrgDomain
          # Fn::FindInMap: ["org", "init", "domain"]
        logo:
          Ref: OrgLogo
          # Fn::FindInMap: ["org", "init", "logo"]
        deploymentUUID:
          Fn::FindInMap: ["deployment", "init", "deploymentUUID"]
        referrerUrl:
          Fn::FindInMap: ["deployment", "init", "referrerUrl"]

        # stack update validation needs these to make sure they didn't change
        ImmutableParameters:
          Stage:
            Ref: Stage
          BlockchainNetwork:
            Ref: BlockchainNetwork
          EncryptTables:
            Ref: EncryptTables

  Outputs:
    EventsTable:
      Value:
        Fn::GetAtt: Tables.Outputs.Events

    Bucket0Table:
      Value:
        Fn::GetAtt: Tables.Outputs.Bucket0

    Bucket0TableStream:
      Value:
        Fn::GetAtt: Tables.Outputs.Bucket0Stream

    ObjectsBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.Objects

    SecretsBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.Secrets

    PrivateConfBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.PrivateConf

    FileUploadBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.FileUpload

    LogsBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.Logs

    DeploymentBucket:
      Value:
        Fn::GetAtt: Buckets.Outputs.Deployment

    ApiGatewayRestApi:
      Value:
        Fn::GetAtt: Source.Outputs.ApiGatewayRestApi

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt: Source.Outputs.ApiGatewayRestApiRootResourceId

    EncryptionKey:
      Value:
        Fn::GetAtt: Keys.Outputs.EncryptionKey

    EncryptionKeyAlias:
      Value:
        Fn::GetAtt: Keys.Outputs.EncryptionKeyAlias

    BucketEncryptionKey:
      Value:
        Fn::GetAtt: Keys.Outputs.BucketEncryptionKey

    BucketEncryptionKeyAlias:
      Value:
        Fn::GetAtt: Keys.Outputs.BucketEncryptionKeyAlias

    S3TemplatesBaseUrl:
      Value:
        Fn::Sub: 'https://${Source.Outputs.SourceDeploymentBucket}.s3.amazonaws.com/${{self:custom.s3TemplatesPath}}'

    # serverless usually generates this
    ServiceEndpoint:
      Description: API root URL
      Value:
        Fn::Sub: 'https://${Source.Outputs.ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'

    # let serverless generate this
    # ServerlessDeploymentBucketName:
    #   Value:
    #     Fn::GetAtt: Buckets.Outputs.Deployment

    SourceDeploymentBucket:
      Value:
        Ref: SourceDeploymentBucket

    InitLogGroup:
      Value:
        Ref: BotUnderscoreoninitLogGroup
